@model MielsJimmyScrumProject.ViewModels.BoardsViewModels.BoardCreateViewModel
@inject UserManager<ApplicationUser> userManager;
@{
    ViewData["Title"] = "Create";
    var user = await userManager.GetUserAsync(Context.User);
}

<h1>Create Board</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" asp-controller="Boards">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="CompanyId" />
            <input type="hidden" asp-for="Id" />

            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    @if (await userManager.IsInRoleAsync(user, "Admin"))
    {
        <a asp-action="AdminIndex" asp-controller="Home"  class="btn btn-secondary" >Back to overview</a>
    }
    else
    {
        <a asp-action="Index" asp-controller="home"  class="btn btn-secondary" >Back to List</a>
    }
</div>

